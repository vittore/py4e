
Variabili, espressioni ed istruzioni
======================================
Valori e tipi
----------------

\index{value}
\index{type}
\index{string}
Un *valore*, come una lettera o un numero, è un elemento basilare che permette ad un programma di funzionare. I valori che abbiamo visto finora sono `1`, `2` e "Hello, World!". Questi valori appartengono a diversi *tipi*: `2` è un numero intero mentre "Hello, World!" è una *stringa*, così chiamata perché composta da una "stringa" di lettere. Tu (e l'interprete) puoi identificare le stringhe poiché racchiuse tra virgolette.\index{quotation mark}
L'istruzione `print` funziona anche con i numeri interi, tramite il comando `python` è possibile avviare l'interprete.

~~~~ {.python}
python
>>> print(4)
4
~~~~


Se non sei sicuro a quale tipo appartenga uno specifico valore, puoi consultare l'interprete.

~~~~ {.python .trinket height="160"}
>>> type('Hello, World!')
<class 'str'>
>>> type(17)
<class 'int'>
~~~~


Non c’è da sorprendersi se le stringhe appartengono al tipo `str` e i numeri interi appartengono al tipo `int`. È meno ovvio che i numeri con un punto decimale appartengano al tipo chiamato `float`. Ciò è dovuto al fatto che questi numeri siano rappresentati in un formato chiamato a *virgola mobile*.
\index{type}
\index{string type}
\index{class!str}
\index{int type}
\index{class!int}
\index{float type}
\index{class!float}


~~~~ {.python .trinket height="120"}
>>> type(3.2)
<class 'float'>
~~~~


E per quanto riguarda valori come "17" e "3.2"? Pur sembrando numeri sono racchiusi tra virgolette come le stringhe.
\index{quotation mark}


~~~~ {.python .trinket  height="160"}
>>> type('17')
<class 'str'>
>>> type('3.2')
<class 'str'>
~~~~


In realtà sono stringhe vere e proprie.
Quando inserisci un numero intero di grandi dimensioni, come "1,000,000", potresti essere tentato di utilizzare le virgole a gruppi di tre cifre. Questo non è un numero intero consentito in Python, anche se sembra scritto correttamente:

~~~~ {.python .trinket height="120"}
>>> print(1,000,000)
1 0 0
~~~~


Beh, non è per niente quello che ci aspettavamo! Python interpreta `1,000,000` come se fosse una sequenza di numeri interi separati da virgole, che visualizza inserendo uno spazio in corrispondenza della virgola.\index{semantic error}\index{error!semantic}\index{error message}
Questo è il primo esempio di errore semantico che vediamo: il codice viene eseguito senza visualizzare messaggi di errore ma non fa l'operazione per la quale pensavamo di averlo progettato.  

Variabili
---------

\index{variable}
\index{assignment statement}
\index{statement!assignment}
Una delle più potenti funzionalità di un linguaggio di programmazione è la capacità di manipolare *variabili*. Una variabile è un nome assegnato ad un valore. Tramite un'*istruzione di assegnazione* hai la capacità di creare nuove variabili ed assegnare loro un valore:

~~~~ {.python}
>>> message = 'And now for something completely different'
>>> n = 17
>>> pi = 3.1415926535897931
~~~~


In questo esempio vengono fatte tre assegnazioni: la prima assegna una stringa ad una nuova variabile chiamata `message`, la seconda assegna il numero intero `17` alla variabile `n`, la terza assegna il valore (approssimativo) di $\pi$ a `pi`.
È possibile usare l'istruzione *print* per visualizzare il valore di una variabile:

~~~~ {.python}
>>> print(n)
17
>>> print(pi)
3.141592653589793
~~~~


Il tipo di una variabile è il tipo di valore a cui essa è collegata.

~~~~ {.python}
>>> type(message)
<class 'str'>
>>> type(n)
<class 'int'>
>>> type(pi)
<class 'float'>
~~~~


Nomi delle variabili e parole chiavi
---------------------------

\index{keyword}
Normalmente i programmatori scelgono nomi per le loro variabili che siano significativi e documentino l'utilizzo della variabile.  Questi nomi, di lunghezza arbitraria, possono contenere sia lettere sia numeri ma non possono iniziare con un numero. Anche se è possibile utilizzare lettere maiuscole, è preferibile iniziare i nomi delle variabili con una lettera minuscola (in seguito ne vedremo il motivo). Il carattere underscore (`_`) appare nel nome di una variabile ed è spesso utilizzato in nomi composti da più parole, come `my_name` o `airspeed_of_unladen_swallow`. I nomi delle variabili possono iniziare con il carattere underscore, ma generalmente evitiamo di farlo a meno che il codice che stiamo scrivendo sia contenuto in librerie che verranno utilizzate da altri.\index{underscore character}
Se assegni ad una variabile un nome non valido, provocherai un errore di sintassi:

~~~~ {.python .trinket height="450"}
>>> 76trombones = 'big parade'
SyntaxError: invalid syntax
>>> more@ = 1000000
SyntaxError: invalid syntax
>>> class = 'Advanced Theoretical Zymurgy'
SyntaxError: invalid syntax
~~~~


Il nome `76trombones` non è valido perché inizia con un numero, `more@`, invece, perché contiene il carattere non ammesso '@'. Ma cosa c'è di errato in `class`?
Risulta che `class` è una delle *parole riservate* di Python. L'interprete utilizza queste parole per riconoscere la struttura del programma, quindi non possono essere assegnate alle variabili.\index{keyword}

Python si riserva 33 parole chiave:

~~~~
and       del       from      None      True
as        elif      global    nonlocal  try
assert    else      if        not       while
break     except    import    or        with
class     False     in        pass      yield
continue  finally   is        raise
def       for       lambda    return
~~~~


E' meglio tenere questo elenco a portata di mano: se l'interprete si lamenta del nome di una delle tue variabili e non ne capisci il motivo, verifica se questa sia presente nella lista.  

Istruzioni
----------

L'*istruzione* è un'unità minima di codice che può essere eseguita dall'interprete di Python. Abbiamo visto due tipi di istruzioni: Print utilizzato sia come istruzione di un'espressione sia come un'assegnazione.\index{statement}\index{interactive mode}\index{script mode}
Quando digiti un'istruzione in modalità interattiva, l'interprete la esegue e, nel caso esista, ne visualizza il risultato.
Generalmente uno script contiene una sequenza di istruzioni. Se c'è più di un'istruzione i risultati vengono visualizzati uno alla volta mano a mano che le istruzioni vengono eseguite. Ad esempio:

~~~~ {.python}
print(1)
x = 2
print(x)
~~~~


produce l'output

~~~~
1
2
~~~~

Ricorda che le istruzioni di assegnazione non producono output.

Operatori e operandi
----------------------

\index{operator, arithmetic}\index{arithmetic operator}\index{operand}\index{expression}
Gli *operatori* sono simboli speciali che rappresentano calcoli come l'addizione e la moltiplicazione. I valori a cui è applicato l'operatore sono chiamati *operandi*. Gli operatori `+`, `-`, `*`, `/`, e `**` eseguono rispettivamente le operazioni di addizione, sottrazione, moltiplicazione, divisione, e l'elevamento a potenza, come illustrato negli esempi seguenti:

~~~~ {.python}
20+32   hour-1   hour*60+minute   minute/60   5**2   (5+9)*(15-7)
~~~~


Nel passaggio tra Python 2.x e Python 3.x è stato modificato l'operatore della divisione: ora il risultato viene rappresentato in virgola mobile:

~~~~ {.python .trinket height="160"}
>>> minute = 59
>>> minute/60
0.9833333333333333
~~~~

In Python 2.x l'operatore avrebbe diviso i due interi e troncato il risultato restituendo un valore intero:

~~~~ {.python}
>>> minute = 59
>>> minute/60
0
~~~~


Per ottenere lo stesso risultato in Python 3.x, bisogna utilizzare la divisione intera (// intero).

~~~~ {.python .trinket  height="160"}
>>> minute = 59
>>> minute//60
0
~~~~


In Python 3.x la divisione integer funziona molto più similmente a come ci si aspetterebbe se si inserisse l'espressione su una calcolatrice.
\index{Python 3.0}
\index{Python 2.0}
\index{floating-point division}
\index{division!floating-point}

Espressioni
-----------

L'*espressione* è una combinazione di valori, variabili e operatori. Sia un unico valore o una variabile sono considerati un'espressione. Pertanto le seguenti sono tutte espressioni corrette (posto che sia stato assegnato un valore alla variabile `x`)
\index{expression}
\index{evaluate}


~~~~ {.python}
17
x
x + 17
~~~~


Se digiti un'espressione in modalità interattiva, l'interprete la *calcolerà* e ne visualizzerà il risultato:

~~~~ {.python}
>>> 1 + 1
2
~~~~


Una cosa che crea spesso confusione tra i principianti è un'espressione presente in uno script, da sola non restituisce alcun risultato.

**Esercizio 1:** Digita le seguenti istruzioni nell'interprete Python ed osserva il loro comportamento:

~~~~ {.python}
5
x = 5
x + 1
~~~~


Ordine delle operazioni
-------------------

\index{order of operations}
\index{rules of precedence}
\index{PEMDAS}
Quando appare più di un operatore in un'espressione, l'ordine di calcolo è regolato dalle *regole di precedenza*. Per quanto riguarda gli operatori matematici, Python segue le convenzioni matematiche. L'acronimo *PEMDAS* è utile per ricordare le regole:
\index{parentheses!overriding precedence}

- *P*arentesi: hanno la precedenza più alta e possono essere utilizzate per costringere il computer a svolgere un'espressione nell'ordine desiderato. Poiché le espressioni tra parentesi vengono valutate per prime: `2 * (3-1)` è uguale a 4 e `(1 + 1) ** (5-2)` a 8. Potete anche utilizzare le parentesi per rendere l'espressione più leggibile, come in `(minuto * 100) / 60`, senza che ciò cambi il risultato.
- L'*E*levamento a potenza ha il livello di precedenza immediatamente successivo, pertanto
    `2 ** 1 + 1` è pari a 3 e non a 4, e `3 * 1 ** 3` è uguale a 3 e non 27.
- Le *M*oltiplicazioni e le *D*ivisioni hanno
    la stessa precedenza, superiore alle *A*ddizioni e alle *S*ottrazioni, che posseggono lo stesso livello di precedenza. Quindi `2 * 3-1` darà come risultato 5, non 4, e `6 + 4 / 2` darà 8.0 e non 5.
- Gli operatori con la stessa precedenza vengono calcolati da sinistra a destra:
    L'espressione `5-3-1` ha come risultato 1 e non 3, perché `5-3` viene svolta per prima e solo dopo viene sottratto `1` da `2`.  In caso di dubbio, utilizza sempre le parentesi nelle tue espressioni, per essere sicuro che i calcoli siano eseguiti nell'ordine desiderato.

Operatore modulo
----------------

\index{modulus operator}
\index{operator!modulus}
L'operatore *modulo* viene applicato a numeri interi e fornisce come risultato il resto quando il primo operando viene diviso per il secondo. In Python, l'operatore modulo è il carattere percentuale (`%`). La sintassi è la stessa degli altri operatori:

~~~~ {.python .trinket height="240"}
>>> quotient = 7 // 3
>>> print(quotient)
2
>>> remainder = 7 % 3
>>> print(remainder)
1
~~~~


Quindi 7 diviso per 3 fa 2 con il resto di 1. L'operatore modulo si può rivelare sorprendentemente utile. Per esempio, è possibile verificare se un numero è divisibile per un altro: se `x%y` fa zero, allora `x` è divisibile per `y`.\index{divisibility}
È inoltre possibile ricavare da un numero quale sia il valore della cifra o delle cifre più a destra. Per esempio, `x % 10` restituisce la cifra più a destra di `x` (in base 10). In modo simile, `x% 100` restituisce le ultime due cifre.  

Operazioni con le stringhe
-----------------

\index{string!operation}
\index{operator!string}
L'operatore `+` opera con le stringhe, senza essere un'addizione in senso strettamente matematico. Esegue invece una  *concatenazione*: unisce insieme le stringhe collegando la seconda dopo l'ultimo carattere della prima. Per esempio:
\index{concatenation}


~~~~ {.python}
>>> first = 10
>>> second = 15
>>> print(first+second)
25
>>> first = '100'
>>> second = '150'
>>> print(first + second)
100150
~~~~


L'output di questo script è `100150`.
L'operatore `*` funziona anche con le stringhe moltiplicando il contenuto di una stringa per un numero intero. Per esempio:

~~~~ {.python}
>>> first = 'Test '
>>> second = 3
>>> print(first * second)
Test Test Test
~~~~


Chiedere un valore in input all'utente
-------------------------

\index{keyboard input}
A volte potrebbe essere necessario richiedere all'utente di inserire il valore di una variabile. Python è dotato di una funzione chiamata `input` in grado di ricevere input dalla tastiera^[In Python 2.0, questa funzione era `raw_input`.]. Quando si utilizza questa funzione il programma si arresta in attesa che l'utente digiti qualcosa. Quando l'utente preme `Invio` o `Enter`, l'esecuzione del programma riprende e `input` restituisce come stringa ciò che l'utente ha digitato.
\index{Python 2.0}


~~~~ {.python}
>>> inp = input()
Some silly stuff
>>> print(inp)
Some silly stuff
~~~~


Prima di ricevere input dall'utente, è una buona idea visualizzare un prompt che informi l'utente sul cosa inserire. È possibile indicare una stringa alla funzione `input` affinché venga visualizzata prima della pausa d'attesa dell'input:
\index{prompt}


~~~~ {.python}
>>> name = input('What is your name?\n')
What is your name?
Chuck
>>> print(name)
Chuck
~~~~


La sequenza `\n` alla fine del prompt indica un andare *a capo*, che è un carattere speciale che causa l'interruzione della linea. Ecco perché l'input dell'utente appare sotto il prompt.\index{newline}
Se ti aspetti che l'utente digiti un intero, è possibile provare a convertire il valore restituito in `int` usando la funzione `int()`.

~~~~ {.python}
>>> prompt = 'What...is the airspeed velocity of an unladen swallow?\n'
>>> speed = input(prompt)
What...is the airspeed velocity of an unladen swallow?
17
>>> int(speed)
17
>>> int(speed) + 5
22
~~~~


Ma se l'utente inserisce qualcosa di diverso da una stringa composta da cifre, viene visualizzato un messaggio d'errore:

~~~~ {.python}
>>> speed = input(prompt)
What...is the airspeed velocity of an unladen swallow?
What do you mean, an African or a European swallow?
>>> int(speed)
ValueError: invalid literal for int() with base 10:
~~~~


Vedremo in seguito come gestire questo tipo di errore.
\index{ValueError}
\index{exception!ValueError}

Commenti
--------

\index{comment}
Man mano che i programmi diventano più grandi e complessi, questi diventano più difficili da leggere. I linguaggi formali sono condensati ed è spesso difficile esaminare un pezzo di codice e capire cosa o perché faccia qualcosa.  Per questo motivo, è una buona idea aggiungere alcune note ai vostri programmi per spiegare in linguaggio naturale cosa stia facendo il programma. Queste note sono chiamate *commenti*, e in Python iniziano con il simbolo `#`:

~~~~ {.python}
# compute the percentage of the hour that has elapsed
percentage = (minute * 100) / 60
~~~~


In questo caso, il commento appare da solo su una riga. Potete anche inserire commenti alla fine di una riga:

~~~~ {.python}
percentage = (minute * 100) / 60     # percentage of an hour
~~~~


Tutto ciò che è compreso tra "\#" e la fine della riga viene ignorato e non ha alcun effetto sul programma. I commenti sono ancor più utili quando documentano funzionalità del codice non così evidenti. Anche se è ragionevole presumere che chi legge il codice possa capire *cosa* questo faccia, è molto più utile spiegarne il *perché*. Questo commento al codice è superfluo ed inutile:

~~~~ {.python}
v = 5     # assign 5 to v
~~~~


Questo commento, invece, contiene informazioni utili che non sono comprese nel codice:

~~~~ {.python}
v = 5     # velocity in meters/second.
~~~~


Assegnare nomi adeguati alle variabili può ridurre la necessità di commenti, ma i nomi lunghi possono rendere difficili da leggere le espressioni complesse, pertanto esiste un compromesso.  

Scegliere nomi mnemonici delle variabili
--------------------------------

\index{mnemonic}
Finché seguirai le semplici regole di denominazione delle variabili evitando le parole riservate, avrai ampia libertà d'azione nella scelta del loro nome. All'inizio questa scelta può essere fonte di confusione quando leggi o scrivi un programma. Ad esempio, i tre script seguenti seppur identici in termini di funzionalità, sembrano molto diversi quando li leggi e provi a capirne il funzionamento.

~~~~ {.python}
a = 35.0
b = 12.50
c = a * b
print(c)
~~~~




~~~~ {.python}
hours = 35.0
rate = 12.50
pay = hours * rate
print(pay)
~~~~




~~~~ {.python}
x1q3z9ahd = 35.0
x1q3z9afd = 12.50
x1q3p9afd = x1q3z9ahd * x1q3z9afd
print(x1q3p9afd)
~~~~


Python interpreta tutti e tre *esattamente allo stesso modo* mentre noi umani leggiamo e comprendiamo questi programmi in modo abbastanza diverso. Si capisce velocemente lo *scopo* del secondo esempio poiché lo sviluppatore ha scelto il nome delle variabili pensando a quali dati saranno memorizzati in ciascuna di esse. Chiamiamo questi nomi di variabili così saggiamente scelti "nomi mnemonici delle variabili". La parola *mnemonico*^[ Vedi <http://www.treccani.it/vocabolario/mnemonico/> per un'estesa descrizione della parola "mnemonico".] significa letteralmente "aiuto per la memoria". Scegliamo nomi mnemonici per le variabili principalmente per aiutarci a ricordare il perché le abbiamo create. Mentre tutto ciò sembra grandioso, i nomi delle variabili mnemonici possono essere d'intralcio alla capacità di uno sviluppatore alle prime armi di analizzare e comprendere un codice. Questo perché gli sviluppatori principianti non hanno ancora memorizzato le parole riservate (ce ne sono solo 33) e talvolta variabili con nomi troppo descrittivi iniziano a sembrare parte del linguaggio e non solo nomi di variabili ben scelti. Dai una rapida occhiata al seguente codice esempio di Python che viene eseguito ripetutamente (in loop) su alcuni dati. Affronteremo presto i loop, ma per ora cerca di capire che cosa significhi:

~~~~ {.python}
for word in words:
    print(word)
~~~~


Cosa sta succedendo? Quali parole (for, word, in, ecc.) sono parole riservate e quali sono solo variabili? Python riesce a capire a livello fondamentale la nozione di parole? I programmatori principianti hanno difficoltà a distinguere quali parti del codice *debbano* restare invariate, come in questo esempio, e quali parti del codice siano semplicemente scelte fatte dallo sviluppatore. Il seguente codice equivale al precedente:

~~~~ {.python}
for slice in pizza:
    print(slice)
~~~~


Per il programmatore alle prime armi è più facile leggere questo script per sapere quali parti siano parole riservate di Python e quali parti siano semplicemente variabili. È abbastanza chiaro che Python non conosce la nozione di pizza e trancio (slice) e che una pizza sia composta da un insieme di uno o più tranci. Ma se il nostro programma riguarda veramente la lettura di dati e la ricerca di parole nei dati, `pizza` e `slice` non sono per niente nomi mnemonici di variabili. Sceglierli come nomi variabili ci distrae dallo scopo del programma. Dopo un breve periodo di tempo, conoscerai le più comuni parole riservate e inizieranno a saltarti agli occhi: <pre> <b>for</b> word <b>in</b> words<b>:</b> <b>print</b> word </pre> Le parti del codice definite da Python (`for`, `in`, `print`, e `:`) sono in grassetto, contrariamente alle variabili scelte dallo sviluppatore (`word` e `words`). Molti editor di testo riconoscono la sintassi di Python e colorano le parole riservate in modo diverso mettendole in evidenza rispetto alle variabili. Dopo un po' di pratica nel leggere Python sarai in grado di capire rapidamente quale sia una variabile e quale una parola riservata.

Debug
---------

\index{debugging}
A questo punto, l'errore di sintassi più probabile che tu possa fare è scegliere un nome di variabile non consentito, come `class` e `yield`, che sono parole chiave, o `odd~job` e` US$ `, che contiene caratteri non consentiti.\index{syntax error}\index{error!syntax}
Se inserisci uno spazio nel nome di variabile, Python riterrà che si tratti di due operandi senza un operatore:

~~~~ {.python}
>>> bad name = 5
SyntaxError: invalid syntax
~~~~




~~~~ {.python}
>>> month = 09
  File "<stdin>", line 1
    month = 09
             ^
SyntaxError: invalid token
~~~~


Per quanto riguarda gli errori di sintassi, bisogna dire che i messaggi di errore non sono di grande aiuto. I messaggi più comuni, `SyntaxError: invalid syntax` e `SyntaxError: invalid token`, sono entrambi poco esplicativi.\index{error message}\index{use before def}\index{exception}\index{runtime error}\index{error!runtime}
L'errore di runtime più comune è "use before def;": cioè l'utilizzo di una variabile prima di averle assegnato un valore. Questo può verificarsi se viene scritta una variabile in modo errato:

~~~~ {.python}
>>> principal = 327.68
>>> interest = principle * rate
NameError: name 'principle' is not defined
~~~~


I nomi delle variabili sono case-sensitive: `LaTeX` non è lo stesso di `latex`.\index{case-sensitivity, variable names}\index{semantic error}\index{error!semantic}
A questo punto la causa più probabile di un errore semantico è l'ordine delle operazioni. Ad esempio, per calcolare $1/2\pi$, potresti essere tentato di scrivere:

~~~~ {.python}
>>> 1.0 / 2.0 * pi
~~~~


Dato che la divisione viene effettuata per prima, otterrai $\pi / 2$ che non è la stessa cosa! Poiché Python non ha modo di sapere cosa volessi realmente scrivere, non riceverai un messaggio di errore ma solo un risultato errato.
\index{order of operations}

Glossario
--------

Istruzione
: Istruzione che assegna un valore a una variabile.
\index{assignment}

concatenare
: Unire due operandi tra di loro.
\index{concatenation}

commento
: informazione in un programma destinato ad altri programmatori (o a chiunque stia leggendo il codice sorgente) e non ha alcun effetto sull'esecuzione del programma.
\index{comment}

calcolare
: Semplificare un'espressione eseguendo le operazioni in modo da ottenere un unico valore.

espressione
: Combinazione di variabili, operatori e valori che fornisce un singolo valore come risultato.
\index{expression}

virgola mobile
: tipodi dato composto da numeri con le parti frazionarie.
\index{floating-point}

interi
: tipo di dato composto da numeri interi.
\index{integer}

parola chiave o riservata
: Una parola riservata che viene utilizzata dal compilatore per analizzare un programma; non potete utilizzare parole chiave come `if`, `def` e `while` come nomi di variabili.
\index{keyword}

mnemonico
: Un aiuto mnemonico: spesso diamo alle variabili nomi mnemonici per aiutarci a ricordare cosa è memorizzato nella variabile.
\index{mnemonic}

operatore modulo
: Un operatore, rappresentato con il segno di percentuale (`%`), che funziona con numeri interi e restituisce il resto quando un numero è diviso per un altro.
\index{modulus operator}
\index{operator!modulus}

operando
: uno dei valori su cui viene applicato un operatore.
\index{operand}

operatore
: Simbolo speciale che rappresenta un semplice calcolo come addizioni, moltiplicazioni o concatenazioni di stringhe.
\index{operator}

regole di precedenza
: Insieme di regole che disciplinano l'ordine in cui vengono calcolate le espressioni che coinvolgono molteplici operatori e operandi.
\index{rules of precedence}
\index{precedence}

istruzione
: una sezione di codice che rappresenta un comando o un'azione. Finora le istruzioni che abbiamo visto sono assegnazioni e istruzioni di stampa.
\index{statement}

stringa
: Un tipo di dato composto da una sequenza di caratteri.
\index{string}

tipo
: Una categoria di valori. I tipi visti fino ad ora sono gli interi (tipo `int`), i numeri a virgola mobile (tipo `float`) e le stringhe (tipo `str`).
\index{type}

valore
: una delle unità di base dei dati, come numeri o stringhe, che possono essere manipolate da un programma.
\index{value}

variabile
: Un nome assegnato ad un valore.
\index{variable}

Esercizi
---------

**Esercizio 2:** Scrivi un programma che usi `input` per chiedere all'utente il proprio nome e poi dia il benvenuto.

~~~~
Enter your name: Chuck
Hello Chuck
~~~~


**Esercizio 3:** Scrivi un programma per richiedere all'utente quante ore di lavoro e tariffe orarie per calcolare la retribuzione lorda.

~~~~
Enter Hours: 35
Enter Rate: 2.75
Pay: 96.25
~~~~


Per ora non ci preoccuperemo di assicurarci che la paga abbia esattamente due cifre dopo la virgola. Se vuoi, puoi giocare con la funzione `round` di Python per arrotondare correttamente la retribuzione risultante a due cifre decimali.   

**Esercizio 4:** Supponiamo di eseguire le seguenti istruzioni di assegnazione:

~~~~
width = 17
height = 12.0
~~~~


Per ciascuna delle seguenti espressioni, scrivi il valore dell'espressione e il tipo di dato (del valore dell'espressione).
1.  `width//2`
2.  `width/2.0`
3.  `height/3`


~~~~ {.python .trinket height="120"}
>>> print(1,000,000)
1 0 0
~~~~


Utilizza l'interprete Python per verificare le tue risposte.

**Esercizio 5:** Scrivi un programma che, richiesta all'utente una temperatura in gradi Celsius, la converta in gradi Fahrenheit e poi la visualizzi.
